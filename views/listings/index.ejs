<% layout("/layouts/boilerplate") %>

<body>
    <style>
        @media (min-width: 767px) {
            .filter-bar-wrapper {
                display: flex;
                align-items: center;
                justify-content: space-between;
            }
            #filters {
                flex-grow: 1;
            }
            .card{
                width: 11rem;
            }
        }
        @media (max-width: 767px) {
            .filter-bar-wrapper {
                display: flex;
                align-items: center;
                justify-content: space-between;
            }
            #filters {
                flex-grow: 1;
                margin-right: 1rem;
            }
            .tax-toggle-wrapper {
                margin-left: 1rem;
            }
            .card{
                width: 9.5rem;
            }
        }
    </style>
    <div class="filter-bar-wrapper">
        <div id="filters" >
            <div class="filter" >
                <form action="/listings" method="GET" class="d-flex " role="search">
                    <input class="form-control" id="location-search" name="location" placeholder="Search by location..." class="form-control mb-2" value="<%= selectedLocation %>" autocomplete="off">
                    <ul id="suggestions" class="list-group position-absolute "></ul>
                    <input type="hidden" name="type" value="<%= selectedType %>">
                    <button class="btn btn-outline-success" type="submit"><i class="fa-solid fa-magnifying-glass-location"></i></button>
                </form>
            </div>
        </div>

        <div class="tax-toggle-wrapper">
            <div class="all-types">
                <form method="GET" action="/listings" class="mb-0.5">
                    <input type="hidden" name="location" value="<%= selectedLocation %>">
                    <select name="type" id="type" class="form-select" onchange="this.form.submit()">
                        <option value="">All Types</option>
                        <option value="Room" <%= selectedType === 'Room' ? 'selected' : '' %>>Room</option>
                        <option value="Flat" <%= selectedType === 'Flat' ? 'selected' : '' %>>Flat</option>
                        <option value="Villa" <%= selectedType === 'Villa' ? 'selected' : '' %>>Villa</option>
                        <option value="Apartment" <%= selectedType === 'Apartment' ? 'selected' : '' %>>Apartment</option>
                        <option value="Studio" <%= selectedType === 'Studio' ? 'selected' : '' %>>Studio</option>
                        <option value="Penthouse" <%= selectedType === 'Penthouse' ? 'selected' : '' %>>Penthouse</option>
                        <option value="Duplex" <%= selectedType === 'Duplex' ? 'selected' : '' %>>Duplex</option>
                        <option value="Bungalow" <%= selectedType === 'Bungalow' ? 'selected' : '' %>>Bungalow</option>
                        <option value="Mansion" <%= selectedType === 'Mansion' ? 'selected' : '' %>>Mansion</option>
                        <option value="Cottage" <%= selectedType === 'Cottage' ? 'selected' : '' %>>Cottage</option>
                        <option value="Townhouse" <%= selectedType === 'Townhouse' ? 'selected' : '' %>>Townhouse</option>
                        <option value="Condominium" <%= selectedType === 'Condominium' ? 'selected' : '' %>>Condominium</option>
                        <option value="Loft" <%= selectedType === 'Loft' ? 'selected' : '' %>>Loft</option>
                        <option value="Serviced Apartment" <%= selectedType === 'Serviced Apartment' ? 'selected' : '' %>>Serviced Apartment</option>
                        <option value="Farmhouse" <%= selectedType === 'Farmhouse' ? 'selected' : '' %>>Farmhouse</option>
                        <option value="Row House" <%= selectedType === 'Row House' ? 'selected' : '' %>>Row House</option>

                    </select>
                </form>
            </div>
            <div class="tax-toggle">
                <div class="form-check-reverse form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="switchCheckDefault">
                    <label class="form-check-label" for="switchCheckDefault">Total after taxes</label>
                </div>
            </div>
        </div>
    </div>

    <div class="bg-container mt-3">
        <% if (listings.length === 0) { %>
            <div class="alert alert-warning">No listings found for "<%= selectedType %>"</div>
        <% } %>

        <% for(let listing of listings.slice().reverse()) { %>
                      <%- include('../listings/card', { listing }) %>
        <% } %>
    </div>


<script>
    let taxSwitch = document.getElementById('switchCheckDefault');
    taxSwitch.addEventListener('change', function () {
        let priceTags = document.querySelectorAll('.card-text');
        priceTags.forEach(priceTag => {
            let basePrice = parseFloat(priceTag.getAttribute('data-price'));
            if (taxSwitch.checked) {
                let tax = basePrice * 0.18;
                priceTag.innerText = `₹${(basePrice + tax).toLocaleString("en-IN")}/night`;
            } else {
                priceTag.innerText = `₹${basePrice.toLocaleString("en-IN")}/night +18% GST`;
            }
        });
    });
</script>

<script>
document.querySelectorAll('.wishlist-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    e.preventDefault();
    const listingId = button.dataset.id;

    try {
      const res = await fetch(`/wishlist/${listingId}/toggle`, {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/json'
        }
      });

      const data = await res.json();
      const icon = button.querySelector('i');

      if (data.status === 'added') {
        icon.classList.remove('fa-regular', 'text-muted');
        icon.classList.add('fa-solid', 'text-danger');
      } else if (data.status === 'removed') {
        icon.classList.remove('fa-solid', 'text-danger');
        icon.classList.add('fa-regular', 'text-muted');
      }

    } catch (err) {
      console.error("Error toggling wishlist:", err);
      alert("Something went wrong.");
    }
  });
});
</script>
<script>
  const input = document.getElementById('location-search');
  const suggestions = document.getElementById('suggestions');

  input.addEventListener('input', async () => {
    const value = input.value.trim();
    if (!value) return suggestions.innerHTML = '';

    const url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${value}&type=city&limit=5&apiKey=9e1bc309c96443ceae6ee3401edf4eed`;

    try {
      const res = await fetch(url);
      const data = await res.json();
      suggestions.innerHTML = '';

      data.features.forEach(feature => {
        const name = feature.properties.city || feature.properties.name;
        const li = document.createElement('li');
        li.textContent = name;
        li.classList.add('list-group-item', 'list-group-item-action');
        li.addEventListener('click', () => {
          input.value = name;
          suggestions.innerHTML = '';
        });
        suggestions.appendChild(li);
      });
    } catch (err) {
      console.error('Autocomplete error:', err);
    }
  });

  document.addEventListener('click', (e) => {
    if (!suggestions.contains(e.target) && e.target !== input) {
      suggestions.innerHTML = '';
    }
  });
</script>

</body>
